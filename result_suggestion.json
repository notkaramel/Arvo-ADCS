{
  "language": "unspecified",
  "type": "unspecified application (no codebase analyzed)",
  "architecture": "12-factor, stateless containers behind Kubernetes Service; externalize state to managed AWS services as needed",
  "is_containerized": true,
  "env_variables": [
    "APP_ENV=production",
    "LOG_LEVEL=info",
    "PORT=8080",
    "HEALTHCHECK_PATH=/healthz",
    "AWS_REGION=<your-region>",
    "AWS_DEFAULT_REGION=<your-region>"
  ],
  "network_settings": {
    "ingress": "AWS Load Balancer Controller providing NLB/ALB Ingress for Kubernetes",
    "service_type": "ClusterIP for internal services; LoadBalancer only if not using Ingress",
    "pod_security": "Use NetworkPolicies to restrict east-west traffic; enable IRSA to avoid node-wide credentials",
    "exposure": "Public via ALB Ingress for web apps; private via Internal ALB or Service mesh for internal APIs",
    "ports": [
      { "name": "http", "port": 80, "targetPort": 8080, "protocol": "TCP" }
    ],
    "dns": "Route 53 managed DNS mapped to Ingress",
    "tls": "ACM-managed certificates terminated at ALB; cert-manager optional for in-cluster TLS",
    "egress": "Use NAT Gateway for private nodes; restrict with egress-only rules and VPC endpoints where possible"
  },
  "cloud_provider": "aws",
  "infrastructure": {
    "kubernetes": {
      "distribution": "EKS (Amazon Elastic Kubernetes Service)",
      "version": "latest supported minor by AWS",
      "node_type": "Managed Node Groups or Fargate depending on workload; start with Managed Node Groups",
      "instance_family": "c6i/c7i general purpose; add gpu instances only if required",
      "autoscaling": "Cluster Autoscaler + Karpenter for bin-packing and rapid scale",
      "addons": [
        "VPC CNI",
        "CoreDNS",
        "kube-proxy",
        "AWS Load Balancer Controller",
        "Cluster Autoscaler or Karpenter",
        "Metrics Server",
        "ExternalDNS (optional)",
        "Secrets Store CSI Driver (with AWS Secrets Manager provider)"
      ],
      "namespaces": ["prod", "staging", "dev"],
      "ingress_controller": "AWS Load Balancer Controller (ALB Ingress)",
      "service_mesh": "Optional: AWS App Mesh or Istio if needed later",
      "security": {
        "irsa": "Use IAM Roles for Service Accounts for least-privileged AWS access",
        "secrets": "Store in AWS Secrets Manager or SSM Parameter Store via CSI driver",
        "pod_security_standards": "Baseline/Restricted via Pod Security Admission",
        "image_scanning": "Enable ECR image scanning; add admission controller (e.g., OPA/Gatekeeper) if needed"
      }
    },
    "container_registry": {
      "service": "Amazon ECR",
      "lifecycle_policy": "Retain recent images; expire old untagged",
      "scanning": "Enhanced scanning"
    },
    "network": {
      "vpc": "Dedicated VPC with 3 AZs",
      "subnets": "Public subnets for ALBs; private subnets for nodes and pods",
      "nat": "NAT Gateways for private egress; consider 1 per AZ or cost-optimized single with route constraints",
      "endpoints": "VPC Interface/Gateway Endpoints for ECR, S3, CloudWatch to reduce NAT costs"
    },
    "observability": {
      "logging": "Fluent Bit to CloudWatch Logs (or OpenSearch/Datadog if preferred)",
      "metrics": "CloudWatch Container Insights + Prometheus (AMP optional) + Grafana (AMG optional)",
      "tracing": "AWS X-Ray or OTEL collector exporting to X-Ray"
    },
    "ci_cd": {
      "pipeline": "GitHub Actions or AWS CodePipeline/CodeBuild",
      "stages": [
        "lint_and_test",
        "build_container",
        "scan_image",
        "push_to_ecr",
        "apply_infra (terraform/cdk)",
        "deploy_to_eks (kubectl/helm with progressive rollout)"
      ],
      "deploy_strategy": "Rolling update with maxUnavailable=0,maxSurge=1; can add canary via Argo Rollouts"
    },
    "iac": {
      "tooling": "Terraform or AWS CDK",
      "state": "Remote state in S3 with DynamoDB locking (Terraform)",
      "modules": [
        "vpc",
        "eks",
        "node_groups",
        "ecr",
        "alb_controller",
        "iam_irsa",
        "observability"
      ]
    }
  }
}
